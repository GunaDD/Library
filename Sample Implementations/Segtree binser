#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int MAXN = 1e5;
int tree[4*MAXN], n, q;
void update(int v, int l, int r, int val, int pos){
	if(l == r){
		tree[v] += val;
		return;
	}

	int mid = (l+r)/2;
	if(pos <= mid)
		update(v*2, l, mid, val, pos);
	else
		update(v*2+1, mid+1, r, val, pos);
	tree[v] = tree[v*2] + tree[v*2+1];
}

int query(int v, int start, int end, int lb, int rb){
	if(rb < start || end < lb) return 0;
	if(lb <= start && end <= rb)
		return tree[v];
	int mid = (start+end)/2;
	return query(v*2, start, mid, lb, rb) + query(v*2+1, mid+1, end, lb, rb);

}

int main()
{
	#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	cin.tie(0) -> ios_base::sync_with_stdio(0);
	
	cin >> n >> q;
	for(int i=0;i<q;i++){
		int t; cin >> t;
		if(t == 1){
			ll l, val;
			cin >> l >> val;
			update(1, 1, n, val, l);
		} else {
			ll x; cin >> x;
			int ans = -1, pref, l = 1, r = n;
			while(l <= r){
				int mid = (l+r)/2;
				if(query(1, 1, n, 1, mid) >= x)
					r = mid - 1, ans = mid;
				else l = mid + 1;
			}
			cout << ans << '\n';
		}
	}
}	 
