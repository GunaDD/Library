template <typename T>
struct Fenwick {
    vector<vector<T>> t;
    T n;
    Fenwick(T n) : n(n) {
        t.resize(2, vector<T>(n));
    }
    T g(T a, T r){
        T ret = 0;
        for (; r >= 0; r = (r & (r + 1)) - 1)
            ret += t[a][r];
        return ret;
    }
    T pref(T i){
        return g(1, i) * i + g(0, i);
    }

    T query(T l, T r){
    	return pref(r) - pref(l - 1);
    }

    void add(T a, T i, T v){
        for(;i < n; i = i | (i + 1))
            t[a][i] += v;
    }

    void range_add(T l, T r, T v){
    	add(0, l, v);
    	add(0, r + 1, -v);
    	add(1, l, v*(l-1));
    	add(1, r + 1, -v * r);
    }
};
