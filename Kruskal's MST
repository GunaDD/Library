vector<pair<int, pair<int,int>>> edge;
struct DSU {
	vector<int> pr;
	int n;

	DSU(int n) : n(n) {
		pr.resize(n);
		iota(pr.begin(), pr.end(), 0);
	}

	inline int findpr(int v) {
		return (v == pr[v] ? v : (pr[v] = findpr(pr[v])));
	}

	inline bool unite(int v, int u) {
		v = findpr(v);
		u = findpr(u);
		if (u == v) {
			return false;
		} else {
			pr[v] = u;
			return true;
		}
	}
};

void solve()
{
	int v, e; // v = num of vertices , e = num of edge
	cin >> v >> e;
	for(int i=0;i<e;i++)
	{
		int st, end, w;
		cin >> st >> end >> w;
		edge.push_back({w, {st, end}});
	}
	sort(edge.begin(), edge.end());

	int mst_cost = 0, edge_count = 0;
	DSU s(v);
	for(auto ed: edge)
	{
		int w = ed.first, st = ed.second.first, end = ed.second.second;
		if(s.findpr(st) != s.findpr(end))
		{
			s.unite(st, end);
			mst_cost += w;
			edge_count++;
		}		

	}
	if(edge_count < v - 1) // check if there is an MST or no
		cout << "No MST\n";
	else 
		cout << mst_cost << '\n';
}
