#include <bits/stdc++.h>
using namespace std;

// 0 based indexing (point update - range query)
template <typename T>
struct Fenwick {
    vector<T> t;
    T n;
    Fenwick(T n) : n(n) {
        t.resize(n);
    }
    T g(T r){
        T ret = 0;
        for (; r >= 0; r = (r & (r + 1)) - 1)
            ret += t[r];
        return ret;
    }
    T sum(T l, T r){
        return g(r) - g(l - 1);
    }
    void add(T i, T v){
        for(;i < n; i = i | (i + 1))
            t[i] += v;
    }
};


int main(){
    cin.tie(0) -> ios_base::sync_with_stdio(0);

    int n;
    cin >> n;
    Fenwick<int> fw(n);
    for(int i=0;i<n;i++)
    {
        int x, v;
        cin >> x >> v; x--;
        fw.add(x, v);
    }
    for(int i=0;i<n;i++)
    {
        int l, r;
        cin >> l >> r;
        l--, r--;
        cout << fw.sum(l, r) << '\n';
    }
}
