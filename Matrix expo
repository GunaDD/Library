#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

constexpr int M = 1e9 + 7;

struct Matrix {
    long long a[2][2] = {{0, 0}, {0, 0}};
    Matrix operator *(const Matrix &other) {
        Matrix product;
        for(int i = 0; i < 2; i++)
        {
            for(int j = 0; j < 2; j++)
            {
                for(int k = 0; k < 2; k++)
                {
                    product.a[i][k] += a[i][j] * other.a[j][k];
                    product.a[i][k] %= M;
                }
            }
        }
        return product;
    }
};

Matrix pw(Matrix a, int k) { // A ^ K
    Matrix res;
    for(int i = 0; i < 2; i++) res.a[i][i] = 1;
    while(k > 0)
    {
        if(k & 1) res = res * a;
        a = a * a;
        k /= 2;
    }
    return res;
}

int main(){
    cin.tie(0) -> ios_base::sync_with_stdio(0);

    int n;
    cin >> n;
    Matrix bc;
    bc.a[0][0] = 0;
    bc.a[0][1] = 1;
    bc.a[1][0] = 1;
    bc.a[1][1] = 1;
    Matrix ans = pw(bc, n);
    cout << ans.a[1][1];
}                                                           
